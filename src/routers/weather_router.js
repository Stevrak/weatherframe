/*
 * weather_router.js
   define additional routers for generating weather location widget
   and process in-page requests.

*/
const express = require('express');
const router = express.Router();

const getWeather = require('../utils/getWeather');// takes general search term

//const getWeather_all = require('../utils/getWeather_all');// takes general search term

const getGeoWeather = require('../utils/getgeoWeather');// filters search through geocode for more specific location

const forecast_addon = require('../data/forecastdata_addon.js'); // replaces expensive($$) forecast return data with sample data
const getIp = require ('../utils/getIp');
const ipstack = require ('../utils/ipstack');
const hbs = require('hbs');
const hbscompiler = require('../utils/hbscompiler.js');

// prep weather data.current.weather_descriptions.[0] to css class name
hbs.registerHelper('underscore', function (value) {
  if (value == undefined) return "r";
  return value.replace(' ','_').toLowerCase();
});

// when retrieving from forcast data dates are in YYYY-MM-DD format
// we want to retrieve the weekday from this so some finagling is required
hbs.registerHelper('dateToDay', function (value) {
  let parts = value.split('-');
  if (parts.length!=3) return 'ERR';
  parts[1]--; //javascript Date starts months at 0=Dec, not 1
  return ['SUN','MON','TUE','WED','THU','FRI','SAT'][new Date(...parts).getDay()];
});


// HBS Templates used to send formatted HTML (iframes, js injection)

// use for geocode/forecast calls in getGeoWeather
var geoweathertemplate;
hbscompiler('./templates/partials/weatherwidget.hbs').then((result)=>{
  geoweathertemplate = result;
})

// use for singular api call getWeather
var weathertemplate;
hbscompiler('./templates/partials/weatherbox.hbs').then((result)=>{
  weathertemplate = result;
})

// use for full weatherstack+forecast data (5 days)
var forecasttemplate;
hbscompiler('./templates/partials/forecastbox.hbs').then((result)=>{
  forecasttemplate = result;
})

// use for full weatherstack+forecast data (5 days) within an IFrame (html/body/css tags)
var forecasttemplate_iframe;
hbscompiler('./templates/partials/forecastbox_iframe.hbs').then((result)=>{
  forecasttemplate_iframe = result;
})


/*
 * routes for various methods of getting and displaying weather data
*/


// sort of an index page for our weather dialogs to text different calls

router.get('/getweather',(req,res) =>{
  res.render('weather')
})


// returns weather data built from address (say, toronto, or street etc)
// compiled from 2 api calls;
// first : https://api.mapbox.com/geocoding/v5 for lat/long from location string,
// then lat/long gets weather info from:
// second : http://api.weatherstack.com/

router.get('/weather',(req,res) => {
if (!req.query.address){
  res.send("no location specified.");
}else{
  geocode(encodeURIComponent(req.query.address), (error, data) => {
      if (error){
        console.log("geocode error")
        res.send({error});
      }else{
        // use data from geocode to call forecast
        forecast(data.lat,data.long,(error,weather)=>{
            if (error){
              res.send({html:error})
            }else{
                const data2 = {
                loc:data,
                weather:weather
              }
              console.log(data2);
              res.send({html:geoweathertemplate(data2)});
            }
        });// end forecast()
      }
  });
}
})// router.get



// retrieve new weather form for html insertion
// geoweather chains the mapbox API and weather API to get location then lat, long
router.get('/geoweather/html', async (req,res)=>{
  let location;
  if (!req.query.address){
    res.send({root:"no location specified."});

  }else{

      // getWeather located at ../utils/getWeather
      const data = await getWeather(req.query.address).catch((e)=>{
          res.send({root:'<div style="color:red">'+ e +'</div>'})
      });

    // if successful, got free API single day (current) data
    if (data){
      data.forecast = forecast_addon(data); //append mock 5-day forcast
      res.send({root:forecasttemplate(data)});
    }
 }
});

// request weather widget created with mock data

router.get('/weather_mock', async (req,res)=>{
    // skip weather api calls to simply fully mock data
    // mock data is sample copy from the weatherstack website
    data = await require('../data/forecastdata.js');

    if (data){
      console.log("working mock weather data",data);
      res.send({root:forecasttemplate(data)});
    }
 });

// iframe call finds daily info but appends mock data if API key fails to get 5 day data
// for forcast (next 5 days then have fake data generated by forecast_addon so we can preview widget)
// this is done to cover the lack of forecast data, which requires a paid API key

router.get('/weather_iframe/:location', async (req,res)=>{

  // use getWeather to take location or generate from ip if not included

  const data = await getWeather(req).catch((e)=>{
      res.send('<div style="color:red">'+ e +'</div>')
  });

  // recieved data, append our fake forecast to it and send
  if (data){
    console.log("data has forecast? : ", 'forecast' in data)
      if (!('forecast' in data)){

        data.forecast = forecast_addon(data);
        console.log("data has forecast after? : ", 'forecast' in data)
      }
      res.send(forecasttemplate_iframe(data));
    }
});


router.get('/weather_iframe', async (req,res)=>{

  // use getWeather to take location or generate from ip if not included

  const data = await getWeather(req).catch((e)=>{
      res.send('<div style="color:red">'+ e +'</div>')
  });

  // recieved data, append our fake forecast to it and send
  if (data){
      if (!data.forecast) data.forecast = forecast_addon(data);
      res.send(forecasttemplate_iframe(data));
    }
});
// if no provided location for iframe call
// look up user ip and use that to find world location then weather

router.get('/weather_iframe_old_old', async (req,res)=>{

    // get ip of the user
    const ip = await getIp(req);

    // then get the location from there
    const loc = await ipstack(ip).catch((e)=>{
      res.send('<div style="color:red">'+ e +'</div>')
    });

    // now find weather at location
    const weather = await getGeoWeather(loc.zip || loc.city).catch((e)=>{
        res.send('<div style="color:red">'+ e +'</div>')
    });

    // append mock 5-day forecast to it and return as handlebars frame
    if (weather){
      weather.forecast = forecast_addon(weather);
      res.send(forecasttemplate_iframe(weather));
    }
});

router.get('/weather_iframe_old', async (req,res)=>{

    // get ip of the user
    const ip = await getIp(req);

    // then get the location from there
    const loc = await ipstack(ip).catch((e)=>{
      res.send('<div style="color:red">'+ e +'</div>')
    });

    // now find weather at location
    const weather = await getGeoWeather(loc.zip || loc.city).catch((e)=>{
        res.send('<div style="color:red">'+ e +'</div>')
    });

    // append mock 5-day forecast to it and return as handlebars frame
    if (weather){
      weather.forecast = forecast_addon(weather);
      res.send(forecasttemplate_iframe(weather));
    }
});



// mock data for iframe
router.get('/weather_mock_iframe', async (req,res)=>{

    // get mock 5 day info
    data = await require('../data/forecastdata.js');


    if (data){
      res.send(forecasttemplate_iframe(data));
    }
 });

module.exports = router;
