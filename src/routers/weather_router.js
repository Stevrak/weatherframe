/*
 * weather_router.js
   define additional routers for generating weather location widget
   and process in-page requests.

*/
const express = require('express');
const router = express.Router();

const getWeather = require('../utils/getWeather');// takes general search term

//const getWeather_all = require('../utils/getWeather_all');// takes general search term

const getGeoWeather = require('../utils/getgeoWeather');// filters search through geocode for more specific location

const forecast_addon = require('../data/forecastdata_addon.js'); // replaces expensive($$) forecast return data with sample data
const getIp = require ('../utils/getIp');
const ipstack = require ('../utils/ipstack');
const hbs = require('hbs');
const hbscompiler = require('../utils/hbscompiler.js');

// prep weather data.current.weather_descriptions.[0] to css class name
hbs.registerHelper('underscore', function (value) {
  if (value == undefined) return "r";
  return value.replace(' ','_').toLowerCase();
});

// when retrieving from forcast data dates are in YYYY-MM-DD format
// we want to retrieve the weekday from this so some finagling is required
hbs.registerHelper('dateToDay', function (value) {
  let parts = value.split('-');
  if (parts.length!=3) return 'ERR';
  parts[1]--; //javascript Date starts months at 0=Dec, not 1
  return ['SUN','MON','TUE','WED','THU','FRI','SAT'][new Date(...parts).getDay()];
});


// HBS Templates used to send formatted HTML (iframes, js injection)

// use for geocode/forecast calls in getGeoWeather
var geoweathertemplate;
hbscompiler('./templates/partials/weatherwidget.hbs').then((result)=>{
  geoweathertemplate = result;
})

// use for singular api call getWeather
var weathertemplate;
hbscompiler('./templates/partials/weatherbox.hbs').then((result)=>{
  weathertemplate = result;
})

// use for full weatherstack+forecast data (5 days)
var forecasttemplate;
hbscompiler('./templates/partials/forecastbox.hbs').then((result)=>{
  forecasttemplate = result;
})

// use for full weatherstack+forecast data (5 days) within an IFrame (html/body/css tags)
var forecasttemplate_iframe;
hbscompiler('./templates/partials/forecastbox_iframe.hbs').then((result)=>{
  forecasttemplate_iframe = result;
})


/*
 * routes for various methods of getting and displaying weather data
*/


// sort of an index page for our weather dialogs to text different calls

router.get('/getweather',(req,res) =>{
  res.render('weather')
})

// retrieve new weather form for html insertion
// geoweather chains the mapbox API and weather API to get location then lat, long
router.get('/weather/:location', async (req,res)=>{
  // use getWeather to take location or generate from ip if not included

  const data = await getWeather(req).catch((e)=>{
      res.send({html:'<div style="color:red">'+ e +'</div>'})
  });

  // recieved data, append our fake forecast if required, and send
  if (data){
    if (!('forecast' in data))
      data.forecast = forecast_addon(data);

    res.send({html:forecasttemplate(data)});
  }else{
    res.send({html:'<div style="color:red">no data returned</div>'});
  }

});

// retrieve new weather form for html insertion
// geoweather chains the mapbox API and weather API to get location then lat, long
router.get('/weather', async (req,res)=>{

  // use getWeather to take location or generate from ip if not included
  const data = await getWeather(req).catch((e)=>{
      res.send({html:'<div style="color:red">'+ e +'</div>'})
  });

  // recieved data, append our fake forecast if required, and send
  if (data){
    if (!('forecast' in data))
      data.forecast = forecast_addon(data);

    res.send({html:forecasttemplate(data)});
  }else{
    res.send({html:'<div style="color:red">no data returned</div>'});
  }
});



// request weather widget created with mock data

router.get('/weather_mock', async (req,res)=>{
    // skip weather api calls to simply fully mock data
    // mock data is sample copy from the weatherstack website
    data = await require('../data/forecastdata.js');

    if (data)
        res.send({html:forecasttemplate(data)});
    else
      res.send({html:"error"});

 });


// iframe call finds daily info but appends mock data if API key fails to get 5 day data
// for forcast (next 5 days then have fake data generated by forecast_addon so we can preview widget)
// this is done to cover the lack of forecast data, which requires a paid API key

router.get('/weather_iframe/:location', async (req,res)=>{

  // use getWeather to take location or generate from ip if not included
  const data = await getWeather(req).catch((e)=>{
      res.send('<div style="color:red">'+ e +'</div>')
  });

  // recieved data, append our fake forecast if required, and send
  if (data){
    if (!('forecast' in data))
      data.forecast = forecast_addon(data);

    res.send(forecasttemplate_iframe(data));
  }
});


router.get('/weather_iframe', async (req,res)=>{

  // use getWeather to take location or generate from ip if not included

  const data = await getWeather(req).catch((e)=>{
      res.send('<div style="color:red">'+ e +'</div>')
  });

  // recieved data, append our fake forecast to it and send
  if (data){
    if (!('forecast' in data))
      data.forecast = forecast_addon(data);

    res.send(forecasttemplate_iframe(data));
  }
});



// mock data for iframe
router.get('/weather_mock_iframe', async (req,res)=>{

    // get mock 5 day info
    data = await require('../data/forecastdata.js');


    if (data){
      res.send(forecasttemplate_iframe(data));
    }
 });

module.exports = router;
